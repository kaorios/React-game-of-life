{"version":3,"sources":["components/Cell.js","components/Board.js","components/Game.js","serviceWorker.js","index.js"],"names":["Grid","styled","div","_templateObject","props","isAlive","Cell","_this$props","this","width","onClick","react_default","a","createElement","style","height","React","Component","BoardBase","Board_templateObject","Rows","_templateObject2","Board","createCells","cells","row","_this","grid","rows","col","push","renderCell","key","_this2","components_Cell","CELL_SIZE","Wrapper","section","Game_templateObject","Title","h1","Game_templateObject2","Button","button","_templateObject3","color","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","interval","isExtinction","generation","state","makeEmptyCells","isRunning","y","x","setState","runIteration","timeoutHandler","window","clearTimeout","stopGame","newCells","Math","round","random","console","log","neighbors","calculateNeighbors","setTimeout","slice","_this3","_this$state","components_Board","handleClick","className","runGame","resetGame","createRandomCells","dirs","i","length","dir","row1","col1","Boolean","location","hostname","match","ReactDOM","render","components_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab6b5c9a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Grid = styled.div`\n  box-sizing: border-box;\n  border: 1px solid #eee;\n  background: ${props => props.isAlive ? \"palevioletred\" : \"rgba(255,255,255,.7)\"};\n  cursor: pointer;\n`;\n\nclass Cell extends React.Component {\n  render() {\n    const {isAlive, width, onClick} = this.props;\n    return (\n        <Grid isAlive = {isAlive}\n              style={{ width: width, height: width }}\n              onClick={onClick}/>\n    );\n  }\n}\n\nexport default Cell;\n","import React from \"react\";\nimport styled from 'styled-components';\n\nimport Cell from './Cell';\n\nconst BoardBase = styled.div`\n  width: 400px;\n  height: 400px;\n`;\n\nconst Rows = styled.div`\n  display:flex;\n`;\n\nclass Board extends React.Component {\n\n  renderCell(row, col) {\n    return (\n        <Cell\n            key={row + col}\n            width={400 / this.props.grid}\n            isAlive={this.props.cells[row][col]}\n            onClick={() => this.props.onClick(row, col)}\n        ></Cell>\n    );\n  }\n\n  createCells = () => {\n    let cells = [];\n\n    for (let row = 0; row < this.props.grid; row++) {\n      let rows = []\n      for (let col = 0; col < this.props.grid; col++) {\n        rows.push(this.renderCell(row, col));\n      }\n      cells.push(<Rows key={row}>{rows}</Rows>)\n    }\n    return cells;\n  };\n\n  render() {\n    return (\n        <BoardBase>\n          {this.createCells()}\n        </BoardBase>\n    )\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Board from './Board';\n\nconst CELL_SIZE = 20;\n\nconst Wrapper = styled.section`\n  padding: 4em 0;\n  background: papayawhip;\n  color: palevioletred;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  display: inline-block;\n  background: ${props => props.color ? props.color : \"palevioletred\"};\n  color: #fff;\n  border: none;\n  font-size: 1rem;\n  padding: 1em 2em;\n  font-weight: bold;\n  cursor: pointer;\n  outline: none;\n  margin-right: 1em;\n  :hover {\n    opacity: .7;\n  }\n`;\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.interval = 100;\n    this.isExtinction = false;\n    this.generation = 0;\n\n    this.state = {\n      cells: this.makeEmptyCells(),\n      isRunning: false,\n    };\n  }\n\n  makeEmptyCells() {\n    let cells = [];\n    for (let y = 0; y < CELL_SIZE; y++) {\n      cells[y] = [];\n      for (let x = 0; x < CELL_SIZE; x++) {\n        cells[y][x] = false;\n      }\n    }\n    return cells;\n  }\n\n  runGame() {\n    this.setState({isRunning: true});\n    this.runIteration();\n  }\n\n  stopGame() {\n    this.setState({isRunning: false});\n    if (this.timeoutHandler) {\n      window.clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n  }\n\n  resetGame() {\n    this.stopGame();\n    this.setState({cells: this.makeEmptyCells()});\n    this.generation = 0;\n    this.isExtinction = false;\n  }\n\n  createRandomCells() {\n    let newCells = this.makeEmptyCells();\n\n    for (let y = 0; y < CELL_SIZE; y++) {\n      newCells[y] = [];\n      for (let x = 0; x < CELL_SIZE; x++) {\n        newCells[y][x] = Math.round(Math.random()) ? true : false;\n      }\n    }\n    this.setState({cells: newCells});\n  }\n\n  runIteration() {\n    if (this.isExtinction) {\n      console.log(this.generation);\n      this.generation = 0;\n    }\n    const {cells} = this.state;\n    let newCells = this.makeEmptyCells();\n\n    this.isExtinction = true;\n\n    for (let row = 0; row < CELL_SIZE; row++) {\n      for (let col = 0; col < CELL_SIZE; col++) {\n        let neighbors = calculateNeighbors(cells, row, col);\n\n        if (cells[row][col]) {\n          if (neighbors === 2 || neighbors === 3) {\n            newCells[row][col] = true;\n            this.isExtinction = false;\n          } else {\n            newCells[row][col] = false;\n          }\n        } else {\n          if (neighbors === 3) {\n            newCells[row][col] = true;\n            this.isExtinction = false;\n          }\n        }\n      }\n    }\n\n    this.setState({cells: newCells});\n    this.generation++;\n\n    if (this.isExtinction) {\n      this.stopGame();\n      return;\n    }\n\n    this.timeoutHandler = window.setTimeout(() => {\n      this.runIteration();\n    }, this.interval);\n  }\n\n  handleClick(row, col) {\n    const newCells = this.state.cells.slice();\n    newCells[row][col] = !newCells[row][col];\n    this.setState({cells: newCells});\n  }\n\n  render() {\n    const {cells, isRunning} = this.state;\n    return (\n        <Wrapper>\n          <div>\n            <Title>Game Of Life</Title>\n            <Board grid={CELL_SIZE} cells={cells} onClick={(row, col) => this.handleClick(row, col)}></Board>\n\n            <div className=\"controls\">\n              <p>Generations: {this.generation} {this.isExtinction ? '(Extinction)' : ''}</p>\n              {isRunning ?\n                  <Button onClick={() => this.stopGame()}>Stop</Button> :\n                  <Button onClick={() => this.runGame()}>Run</Button>\n              }\n              <Button onClick={() => this.resetGame()} color={'#78909C'}>Reset</Button>\n              <Button onClick={() => this.createRandomCells()} color={'#78909C'}>Random</Button>\n            </div>\n          </div>\n        </Wrapper>\n    )\n  }\n}\n\nexport default Game;\n\nfunction calculateNeighbors(cells, row, col) {\n  let neighbors = 0;\n  const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n  for (let i = 0; i < dirs.length; i++) {\n    const dir = dirs[i];\n    let row1 = row + dir[0];\n    let col1 = col + dir[1];\n\n    if (col1 >= 0 && col1 < CELL_SIZE && row1 >= 0 && row1 < CELL_SIZE && cells[row1][col1]) {\n      neighbors++;\n    }\n  }\n\n  return neighbors;\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}